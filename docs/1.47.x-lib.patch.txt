--- a/lib/server/chromium/crDevTools.js	
+++ b/lib/server/chromium/crDevTools.js	
@@ -66,7 +66,11 @@
         contextId: event.executionContextId
       }).catch(e => null);
     });
-    Promise.all([session.send('Runtime.enable'), session.send('Runtime.addBinding', {
+    Promise.all([(() => {
+      if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+        return session.send('Runtime.enable', {});
+      }
+    })(), session.send('Runtime.addBinding', {
       name: kBindingName
     }), session.send('Page.enable'), session.send('Page.addScriptToEvaluateOnNewDocument', {
       source: `

--- a/lib/server/chromium/crPage.js	
+++ b/lib/server/chromium/crPage.js	
@@ -445,7 +445,11 @@
       }
     }), this._client.send('Log.enable', {}), lifecycleEventsEnabled = this._client.send('Page.setLifecycleEventsEnabled', {
       enabled: true
-    }), this._client.send('Runtime.enable', {}), this._client.send('Runtime.addBinding', {
+    }), (() => {
+      if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+        return this._client.send('Runtime.enable', {});
+      }
+    })(), this._client.send('Runtime.addBinding', {
       name: _page.PageBinding.kPlaywrightBinding
     }), this._client.send('Page.addScriptToEvaluateOnNewDocument', {
       source: '',
@@ -624,8 +628,11 @@
     session.once('Runtime.executionContextCreated', async event => {
       worker._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event.context));
     });
-    // This might fail if the target is closed before we initialize.
-    session._sendMayFail('Runtime.enable');
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+      // This might fail if the target is closed before we initialize.
+      session._sendMayFail('Runtime.enable');
+    }
+
     // TODO: attribute workers to the right frame.
     this._crPage._networkManager.addSession(session, (_this$_page$_frameMan = this._page._frameManager.frame(this._targetId)) !== null && _this$_page$_frameMan !== void 0 ? _this$_page$_frameMan : undefined).catch(() => {});
     session._sendMayFail('Runtime.runIfWaitingForDebugger');
@@ -1051,9 +1058,16 @@
     return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to);
   }
   async _adoptBackendNodeId(backendNodeId, to) {
+    let executionContextId;
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+      executionContextId = to[contextDelegateSymbol]._contextId;
+    } else {
+      // contextDelegateSymbol isn't used if fix is enabled
+      executionContextId = to._delegate._contextId;
+    }
     const result = await this._client._sendMayFail('DOM.resolveNode', {
       backendNodeId,
-      executionContextId: to[contextDelegateSymbol]._contextId
+      executionContextId
     });
     if (!result || result.object.subtype === 'null') throw new Error(dom.kUnableToAdoptErrorMessage);
     return to.createHandle(result.object).asElement();

--- a/lib/server/chromium/crServiceWorker.js	
+++ b/lib/server/chromium/crServiceWorker.js	
@@ -46,7 +46,9 @@
       this.updateOffline();
       this._networkManager.addSession(session, undefined, true /* isMain */).catch(() => {});
     }
-    session.send('Runtime.enable', {}).catch(e => {});
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+      session.send('Runtime.enable', {}).catch(e => {});
+    }
     session.send('Runtime.runIfWaitingForDebugger').catch(e => {});
     session.on('Inspector.targetReloadedAfterCrash', () => {
       // Resume service worker after restart.

--- a/lib/server/frames.js	
+++ b/lib/server/frames.js	
@@ -22,6 +22,7 @@
 var _frameSelectors = require("./frameSelectors");
 var _errors = require("./errors");
 var _fileUploadUtils = require("./fileUploadUtils");
+var _crExecutionContext = require("./chromium/crExecutionContext");
 function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
 function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
 /**
@@ -60,6 +61,7 @@
     this._webSockets = new Map();
     this._openedDialogs = new Set();
     this._closeAllOpeningDialogs = false;
+    this.__re__contexts = undefined;
     this._page = page;
     this._mainFrame = undefined;
   }
@@ -427,6 +429,7 @@
     if (this._inflightRequests.size === 0) this._startNetworkIdleTimer();
     this._page.mainFrame()._recalculateNetworkIdle(this);
     this._onLifecycleEvent('commit');
+    this.__re__contexts = undefined;
   }
   setPendingDocument(documentInfo) {
     this._pendingDocument = documentInfo;
@@ -581,7 +584,171 @@
   async frameElement() {
     return this._page._delegate.getFrameElement(this);
   }
+  async __re__getMainWorld({
+    client,
+    frameId
+  }) {
+    let contextId;
+
+    // random name to make it harder to detect for any 3rd party script by watching window object and events
+    const randomName = [...Array(Math.floor(Math.random() * (10 + 1)) + 10)].map(() => Math.random().toString(36)[2]).join('');
+    process.env['REBROWSER_PATCHES_DEBUG'] && console.log(`[rebrowser-patches][getMainWorld] binding name = ${randomName}`);
+
+    // add the binding
+    await client.send('Runtime.addBinding', {
+      name: randomName
+    });
+
+    // listen for 'Runtime.bindingCalled' event
+    const bindingCalledHandler = ({
+      name,
+      payload,
+      executionContextId
+    }) => {
+      process.env['REBROWSER_PATCHES_DEBUG'] && console.log('[rebrowser-patches][bindingCalledHandler]', {
+        name,
+        payload,
+        executionContextId
+      });
+      if (contextId > 0) {
+        // already acquired the id
+        return;
+      }
+      if (name !== randomName) {
+        // ignore irrelevant bindings
+        return;
+      }
+      if (payload !== frameId) {
+        // ignore irrelevant frames
+        return;
+      }
+      contextId = executionContextId;
+      // remove this listener
+      client.off('Runtime.bindingCalled', bindingCalledHandler);
+    };
+    client.on('Runtime.bindingCalled', bindingCalledHandler);
+
+    // we could call the binding right from addScriptToEvaluateOnNewDocument, but this way it will be called in all existing frames and it's hard to distinguish children from the parent
+    await client.send('Page.addScriptToEvaluateOnNewDocument', {
+      source: `document.addEventListener('${randomName}', (e) => self['${randomName}'](e.detail.frameId))`,
+      runImmediately: true
+    });
+
+    // create new isolated world for this frame
+    const createIsolatedWorldResult = await client.send('Page.createIsolatedWorld', {
+      frameId,
+      // use randomName for worldName to distinguish from normal utility world
+      worldName: randomName,
+      grantUniveralAccess: true
+    });
+
+    // emit event in the specific frame from the isolated world
+    await client.send('Runtime.evaluate', {
+      expression: `document.dispatchEvent(new CustomEvent('${randomName}', { detail: { frameId: '${frameId}' } }))`,
+      contextId: createIsolatedWorldResult.executionContextId
+    });
+    process.env['REBROWSER_PATCHES_DEBUG'] && console.log(`[rebrowser-patches][getMainWorld] result:`, {
+      contextId
+    });
+    return contextId;
+  }
+  async __re__getIsolatedWorld({
+    client,
+    frameId,
+    worldName
+  }) {
+    const createIsolatedWorldResult = await client.send('Page.createIsolatedWorld', {
+      frameId,
+      worldName,
+      grantUniveralAccess: true
+    });
+    process.env['REBROWSER_PATCHES_DEBUG'] && console.log(`[rebrowser-patches][getIsolatedWorld] result:`, createIsolatedWorldResult);
+    return createIsolatedWorldResult.executionContextId;
+  }
   _context(world) {
+    const fixMode = process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] || 'addBinding';
+    process.env['REBROWSER_PATCHES_DEBUG'] && console.log(`[rebrowser-patches][frames._context] frameId = ${this._id}, world = ${world}, fixMode = ${fixMode}`);
+    if (fixMode !== '0') {
+      if (typeof this.__re__contexts === 'undefined') {
+        this.__re__contexts = {};
+      }
+      const frameSession = this._page._delegate._sessions.get(this._id) || this._page._delegate._mainFrameSession;
+      const client = frameSession._client;
+      const utilityWorldName = process.env['REBROWSER_PATCHES_UTILITY_WORLD_NAME'] !== '0' ? process.env['REBROWSER_PATCHES_UTILITY_WORLD_NAME'] || 'util' : '__playwright_utility_world__';
+      let getWorldPromise;
+      if (fixMode === 'addBinding') {
+        if (this.__re__contexts[world] !== undefined) {
+          return Promise.resolve(this.__re__contexts[world]);
+        }
+        if (world === 'utility') {
+          getWorldPromise = this.__re__getIsolatedWorld({
+            client,
+            frameId: this._id,
+            worldName: utilityWorldName
+          }).then(contextId => {
+            return {
+              id: contextId,
+              name: utilityWorldName,
+              auxData: {
+                frameId: this._id,
+                isDefault: false
+              }
+            };
+          });
+        } else if (world === 'main') {
+          getWorldPromise = this.__re__getMainWorld({
+            client,
+            frameId: this._id
+          }).then(contextId => {
+            return {
+              id: contextId,
+              name: '',
+              auxData: {
+                frameId: this._id,
+                isDefault: true
+              }
+            };
+          });
+        }
+        getWorldPromise = getWorldPromise.then(contextPayload => {
+          const delegate = new _crExecutionContext.CRExecutionContext(client, contextPayload);
+          this.__re__contexts[world] = new dom.FrameExecutionContext(delegate, this, world);
+          return this.__re__contexts[world];
+        });
+      } else if (fixMode === 'alwaysIsolated') {
+        // use only utility context
+        if (this.__re__contexts.utility !== undefined) {
+          return Promise.resolve(this.__re__contexts.utility);
+        }
+        getWorldPromise = this.__re__getIsolatedWorld({
+          client,
+          frameId: this._id,
+          worldName: utilityWorldName
+        }).then(contextId => {
+          const contextPayload = {
+            id: contextId,
+            name: utilityWorldName,
+            auxData: {
+              frameId: this._id,
+              isDefault: false
+            }
+          };
+          const delegate = new _crExecutionContext.CRExecutionContext(client, contextPayload);
+          this.__re__contexts.utility = new dom.FrameExecutionContext(delegate, this, 'utility');
+          return this.__re__contexts.utility;
+        });
+      }
+      return getWorldPromise.catch(error => {
+        if (error.message.includes('No frame for given id found')) {
+          // ignore, frame is already gone
+          return {
+            destroyedReason: 'Frame was detached'
+          };
+        }
+        _debugLogger.debugLogger.log('error', error);
+        console.error('[rebrowser-patches][frames._context] cannot get world, error:', error);
+      });
+    }
     return this._contextData.get(world).contextPromise.then(contextOrDestroyedReason => {
       if (contextOrDestroyedReason instanceof js.ExecutionContext) return contextOrDestroyedReason;
       throw new Error(contextOrDestroyedReason.destroyedReason);
